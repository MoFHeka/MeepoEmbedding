"""
Copyright 2024 The MeepoEmbedding Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================
"""

module(
    name = "meepo_embedding",
    version = "0.0.1",
    compatibility_level = 1,
)

# setting skylib
bazel_dep(name = "bazel_skylib", version = "1.7.1")

# setting cuda toolchain
bazel_dep(name = "rules_cuda", version = "0.2.1")
cuda = use_extension("@rules_cuda//cuda:extensions.bzl", "toolchain")
cuda.local_toolchain(
    name = "local_cuda",
    toolkit_path = "",
)
use_repo(cuda, "local_cuda")

# setting Nvidia stdexec as default executor
stdexec_deps = use_extension("//third_party/nvidia_stdexec:extensions.bzl", "nvidia_stdexec_dep")
use_repo(stdexec_deps, "stdexec")

# setting proxy for next generation polymorphism in C++
proxy_deps = use_extension("//third_party/proxy:extensions.bzl", "proxy_dep")
use_repo(proxy_deps, "proxy")

# setting dlpack for tensor packaging
dlpack_deps = use_extension("//third_party/dlpack:extensions.bzl", "dlpack_dep")
use_repo(dlpack_deps, "dlpack")

# setting yaml-cpp as config parser with different backend
bazel_dep(name = "yaml-cpp", version = "0.8.0")

# setting quill for logging
bazel_dep(name = "quill", version = "6.0.0")

# setting magic_enum for static reflection of enum
bazel_dep(name = "magic_enum", version = "0.9.6")

# setting googletest for cpp testing
bazel_dep(name = "googletest", version = "1.15.2")

register_toolchains(
    "@local_cuda//toolchain:nvcc-local-toolchain",
    "@local_cuda//toolchain/clang:clang-local-toolchain",
)
